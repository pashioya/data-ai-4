Optimization Document

Query to Optimize:
SELECT dim_Customer.SubscriptionType, COUNT(*) AS NumRides
FROM Fact_velo
         JOIN dim_Customer ON Fact_velo.DIM_CUSTOMER_SUBSCRIPTION_SK = dim_Customer.CUSTOMER_SK
GROUP BY dim_Customer.SubscriptionType;

Execution Plan Before Optimization:
The execution plan shows a join operation between the Fact_velo and dim_Customer tables,
followed by a group by operation on the SubscriptionType column.
The execution plan may vary depending on whether the tables are indexed or not.

Script to Apply Optimization: Column Storage
ALTER TABLE Fact_velo
REBUILD WITH (DATA_COMPRESSION = COLUMNSTORE)
GO

Execution Plan After Optimization:
The execution plan now takes advantage of column storage.
It performs a columnstore scan on the Fact_velo table, utilizing the compressed columnar format.
The necessary columns (DIM_CUSTOMER_SUBSCRIPTION_SK) are accessed for the join operation, and the group by operation is performed on the SubscriptionType column.


Comparison of Before and After Execution Plan:
Before Optimization:
Join operation between the Fact_velo and dim_Customer tables
Group by operation on the SubscriptionType column


After Optimization:
Columnstore scan on the Fact_velo table
Join operation using the necessary columns (DIM_CUSTOMER_SUBSCRIPTION_SK)
Group by operation on the SubscriptionType column


Decision:
Based on the collected information, implementing the column storage optimization is recommended,
especially if the Fact_velo table contains a large volume of data.
The column storage optimization brings benefits such as compression, column elimination, and vectorized processing,
which can significantly improve query performance.
The script to enable column storage on the Fact_velo table is provided.